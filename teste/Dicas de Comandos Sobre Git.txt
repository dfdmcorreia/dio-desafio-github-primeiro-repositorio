# 📚 Git

## 💻 Comandos Git que facilitam o trabalho com o Git e o GitHub

### 🔍 Alguns dos comandos mais úteis do Git:

O git é um sistema de controle de versão distribuído que permite gerenciar projetos de software de forma eficiente e colaborativa. Com o git, você pode criar, modificar, mesclar e compartilhar o código-fonte de seus programas com outros desenvolvedores.

Para usar o git, você precisa instalar o programa em seu computador e configurar seu nome de usuário e e-mail. Você também pode usar o GitHub, uma plataforma online que hospeda repositórios git e facilita a colaboração.

Um repositório git é um diretório que contém os arquivos e o histórico de um projeto. Você pode criar um repositório git localmente, usando o comando git init, ou clonar um repositório remoto, usando o comando git clone.

Os principais comandos e atalhos do git são:


- `git status`: mostra o estado atual do seu repositório, indicando quais arquivos foram modificados, adicionados, removidos ou ignorados. Ele também mostra se você está em uma branch diferente da master, se você tem commits para enviar ou receber, e se você tem conflitos para resolver. É um comando útil para verificar o progresso do seu projeto e planejar os próximos passos.

- `git add`: adiciona os arquivos modificados ou novos à área de preparação, que é uma área intermediária entre o seu repositório local e o remoto. Você pode usar `git add .` para adicionar todos os arquivos do diretório atual, ou `git add -A` para adicionar todos os arquivos do repositório.

- `git commit`: cria um registro permanente das mudanças que você fez na área de preparação, com uma mensagem descritiva. Você pode usar `git commit -m "mensagem"` para escrever a mensagem na linha de comando, ou `git commit -a` para adicionar e registrar todos os arquivos modificados em um único passo.

- `git push`: envia os commits que você fez no seu repositório local para o repositório remoto, sincronizando as duas versões do projeto. Você pode usar `git push origin master` para enviar os commits da sua branch master para a branch master do repositório remoto chamado origin, ou `git push -u origin master` para fazer o mesmo e também definir a branch remota como a branch padrão para futuros pushes.

- `git pull`: recebe os commits que foram feitos no repositório remoto e os mescla com o seu repositório local, atualizando o seu projeto. Você pode usar `git pull origin master` para receber e mesclar os commits da branch master do repositório remoto chamado origin com a sua branch master local, ou `git pull --rebase origin master` para fazer o mesmo e também reescrever o histórico do seu repositório local para evitar conflitos.

- `git branch`: lista as branches (ramificações) do seu repositório local, que são versões paralelas do projeto que podem conter mudanças diferentes. Você pode usar `git branch nome` para criar uma nova branch chamada nome, ou `git branch -d nome` para deletar uma branch chamada nome.

- `git checkout`: muda a branch ativa do seu repositório local, que é a versão do projeto que você está trabalhando. Você pode usar `git checkout nome` para mudar para a branch chamada nome, ou `git checkout -b nome` para criar e mudar para uma nova branch chamada nome.

- `git merge`: combina as mudanças de duas branches diferentes, criando um novo commit que representa o estado final do projeto. Você pode usar `git merge nome` para mesclar a branch chamada nome com a branch ativa, ou `git merge --abort` para cancelar uma mesclagem que gerou conflitos.

- `git log`: mostra o histórico de commits do seu repositório local, com informações como o autor, a data, a mensagem e o código identificador de cada commit. Você pode usar `git log --oneline` para mostrar uma versão resumida do histórico, ou `git log --graph` para mostrar uma representação gráfica das branches e dos merges.

- `git diff`: mostra as diferenças entre os arquivos do seu repositório local, indicando quais linhas foram adicionadas, removidas ou alteradas. Você pode usar `git diff` para mostrar as diferenças entre o seu diretório de trabalho e a área de preparação, ou `git diff --staged` para mostrar as diferenças entre a área de preparação e o último commit.

- `git reset`: desfaz as mudanças que você fez no seu repositório local, restaurando o estado anterior do projeto. Você pode usar `git reset --soft codigo` para desfazer os commits até o commit identificado pelo código, mantendo as mudanças na área de preparação, ou `git reset --hard codigo` para desfazer os commits e as mudanças até o commit identificado pelo código, descartando tudo o que foi feito depois dele.